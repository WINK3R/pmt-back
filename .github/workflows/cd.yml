name: CD (build docker & deploy)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/pmt-backend
  IMAGE_TAG: latest

jobs:
  docker-build-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        if: ${{ !github.event.repository.private }}
        run: echo "${{ github.token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Log in to GHCR (with PAT for private repos)
        if: ${{ github.event.repository.private }}
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build image
        run: docker build -t $IMAGE_NAME:$IMAGE_TAG .

      - name: Push image
        run: docker push $IMAGE_NAME:$IMAGE_TAG

  deploy-ssh:
    needs: docker-build-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install ssh client
        run: sudo apt-get update && sudo apt-get install -y ssh

      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          printf "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config

      - name: Remote deploy commands
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          IMAGE: ghcr.io/${{ github.repository_owner }}/pmt-backend:latest
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          ssh ${SSH_USER}@${SSH_HOST} << 'EOF'
            set -e
            docker login ghcr.io -u $GITHUB_ACTOR -p $GITHUB_TOKEN || true
            mkdir -p ~/pmt && cd ~/pmt

            cat > docker-compose.yml <<COMPOSE
            services:
              backend:
                image: ${IMAGE}
                container_name: pmt-backend
                restart: unless-stopped
                environment:
                  SPRING_PROFILES_ACTIVE: prod
                  SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
                  SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
                  SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
                  JWT_SECRET: ${JWT_SECRET}
                ports:
                  - "8080:8080"
            COMPOSE

            docker compose pull
            docker compose up -d
            docker image prune -f
          EOF
        shell: bash
